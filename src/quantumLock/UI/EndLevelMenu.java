package quantumLock.UI;

import quantumLock.QuantumLock;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class EndLevelMenu {
    public JButton nextLevelButton;
    private JButton mainMenuButton;
    public JTable results;
    public JPanel panel;
    private JScrollPane scrollPane;
    public JLabel time;

    public EndLevelMenu() {
        $$$setupUI$$$();
        panel.setSize(500, 500);
        panel.setVisible(false);
        panel.setEnabled(false);
        nextLevelButton.setEnabled(true);

        nextLevelButton.addActionListener(e -> {
            QuantumLock.nextLevel();
            QuantumLock.hideLevelEnd();
        });
        mainMenuButton.addActionListener(e -> {
            QuantumLock.hideLevelEnd();
            QuantumLock.startMainMenu();
        });
    }

    private void createUIComponents() {
        DefaultTableModel model = new DefaultTableModel(new Object[]{"Level", "Time", "Overall Time"}, 0);
        results = new JTable(model);
        results.getTableHeader().setReorderingAllowed(false); //stops user from reordering columns at run time

        scrollPane = new JScrollPane(results); //places table into JScrollPane
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.setEnabled(false);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER); //center all text in table

        TableColumnModel columnModel = results.getColumnModel(); //set column widths
        columnModel.getColumn(0).setPreferredWidth(70);  //Level
        columnModel.getColumn(0).setCellRenderer(centerRenderer);
        columnModel.getColumn(1).setPreferredWidth(200); //Time
        columnModel.getColumn(1).setCellRenderer(centerRenderer);
        columnModel.getColumn(2).setPreferredWidth(200); //Overall Time
        columnModel.getColumn(2).setCellRenderer(centerRenderer);
    }

    public void clearResults() {
        DefaultTableModel model = (DefaultTableModel) results.getModel();
        model.setRowCount(0);
    }

    public void show() {
        panel.setVisible(true);
        panel.setEnabled(true);
    }

    public void hide() {
        panel.setVisible(false);
        panel.setEnabled(false);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        nextLevelButton = new JButton();
        Font nextLevelButtonFont = this.$$$getFont$$$(null, -1, 20, nextLevelButton.getFont());
        if (nextLevelButtonFont != null) nextLevelButton.setFont(nextLevelButtonFont);
        nextLevelButton.setText("Next Level");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.gridwidth = 3;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(nextLevelButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 6;
        gbc.weighty = 0.06;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer1, gbc);
        mainMenuButton = new JButton();
        mainMenuButton.setText("Main Menu");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(mainMenuButton, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 8;
        gbc.weighty = 0.05;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer2, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 48, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Level Complete!");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 7;
        panel.add(label1, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 10;
        gbc.weighty = 0.05;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.weighty = 0.06;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer5, gbc);
        scrollPane.setEnabled(false);
        scrollPane.setHorizontalScrollBarPolicy(30);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 5;
        gbc.weightx = 0.5;
        gbc.weighty = 0.2;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(scrollPane, gbc);
        results.setEnabled(false);
        results.setFillsViewportHeight(false);
        scrollPane.setViewportView(results);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 5;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer7, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer8, gbc);
        final JPanel spacer9 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 7;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer9, gbc);
        final JPanel spacer10 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 9;
        gbc.weightx = 0.01;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer10, gbc);
        final JPanel spacer11 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 9;
        gbc.weightx = 0.01;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(spacer11, gbc);
        time = new JLabel();
        Font timeFont = this.$$$getFont$$$(null, -1, 22, time.getFont());
        if (timeFont != null) time.setFont(timeFont);
        time.setText("Your Time: ");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 7;
        panel.add(time, gbc);
        final JPanel spacer12 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.weighty = 0.01;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel.add(spacer12, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
